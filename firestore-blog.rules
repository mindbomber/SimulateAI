// Enhanced Firestore Security Rules for Blog System
// Comprehensive rules supporting the advanced blog implementation

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for user authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function isAuthor(resource) {
      return isAuthenticated() && resource.data.authorUID == getUserId();
    }
    
    function isDonor() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(getUserId())).data.tier == 'donor';
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(getUserId())).data.role == 'admin';
    }
    
    function isModerator() {
      return isAuthenticated() && 
             (get(/databases/$(database)/documents/users/$(getUserId())).data.role in ['admin', 'moderator']);
    }

    // Blog Posts Collection
    match /posts/{postId} {
      // Public read access for published posts
      allow read: if resource.data.status == 'published' && 
                     resource.data.visibility == 'public';
      
      // Authors can read their own posts (including drafts)
      allow read: if isAuthor(resource);
      
      // Moderators can read all posts
      allow read: if isModerator();
      
      // Authenticated users can create posts
      allow create: if isAuthenticated() &&
                       // Ensure author matches authenticated user
                       request.resource.data.authorUID == getUserId() &&
                       // Validate required fields
                       request.resource.data.keys().hasAll(['title', 'body', 'authorUID', 'createdAt']) &&
                       // Title length validation
                       request.resource.data.title.size() <= 200 &&
                       // Content validation
                       request.resource.data.body.size() > 0 &&
                       // Status validation
                       request.resource.data.status in ['draft', 'published'] &&
                       // Visibility validation
                       request.resource.data.visibility in ['public', 'private', 'unlisted'];
      
      // Authors can update their own posts
      allow update: if isAuthenticated() &&
                       // Must be the author
                       resource.data.authorUID == getUserId() &&
                       // Can't change author
                       request.resource.data.authorUID == resource.data.authorUID &&
                       // Validate updated fields
                       request.resource.data.title.size() <= 200 &&
                       request.resource.data.body.size() > 0;
      
      // Moderators can update any post (for moderation)
      allow update: if isModerator();
      
      // Authors can delete their own posts
      allow delete: if isAuthor(resource);
      
      // Moderators can delete any post
      allow delete: if isModerator();
      
      // Comments subcollection
      match /comments/{commentId} {
        // Anyone can read comments on public posts
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.status == 'published';
        
        // Authors can read comments on their posts
        allow read: if get(/databases/$(database)/documents/posts/$(postId)).data.authorUID == getUserId();
        
        // Authenticated users can create comments
        allow create: if isAuthenticated() &&
                         // Ensure commenter matches authenticated user
                         request.resource.data.authorUID == getUserId() &&
                         // Validate required fields
                         request.resource.data.keys().hasAll(['content', 'authorUID', 'createdAt']) &&
                         // Content validation
                         request.resource.data.content.size() > 0 &&
                         request.resource.data.content.size() <= 2000;
        
        // Comment authors can update their own comments
        allow update: if isAuthenticated() &&
                         resource.data.authorUID == getUserId() &&
                         // Can't change author
                         request.resource.data.authorUID == resource.data.authorUID;
        
        // Comment authors can delete their own comments
        allow delete: if isAuthenticated() &&
                         resource.data.authorUID == getUserId();
        
        // Post authors can delete comments on their posts
        allow delete: if get(/databases/$(database)/documents/posts/$(postId)).data.authorUID == getUserId();
        
        // Moderators can update/delete any comment
        allow update, delete: if isModerator();
      }
    }
    
    // User Profiles - Enhanced for blog system
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isAuthenticated() && userId == getUserId();
      
      // Public profile fields can be read by anyone
      allow read: if resource.data.keys().hasAny(['displayName', 'photoURL', 'bio', 'affiliation']);
      
      // Users can update their own profile
      allow update: if isAuthenticated() && 
                       userId == getUserId() &&
                       // Validate profile data
                       (!('bio' in request.resource.data) || request.resource.data.bio.size() <= 500) &&
                       (!('affiliation' in request.resource.data) || request.resource.data.affiliation.size() <= 200);
      
      // User likes subcollection
      match /likes/{postId} {
        // Users can manage their own likes
        allow read, write: if isAuthenticated() && userId == getUserId();
      }
      
      // User drafts subcollection
      match /drafts/{draftId} {
        // Users can manage their own drafts
        allow read, write: if isAuthenticated() && userId == getUserId();
      }
    }
    
    // Blog Categories Collection (read-only for most users)
    match /blog-categories/{categoryId} {
      // Anyone can read categories
      allow read: if true;
      
      // Only admins can modify categories
      allow write: if isAdmin();
    }
    
    // Blog Settings Collection (admin only)
    match /blog-settings/{settingId} {
      // Anyone can read public settings
      allow read: if resource.data.public == true;
      
      // Only admins can modify settings
      allow write: if isAdmin();
    }
    
    // Analytics Collection (restricted access)
    match /analytics/{analyticsId} {
      // Only admins can read analytics
      allow read: if isAdmin();
      
      // System can write analytics (via Cloud Functions)
      allow write: if false; // Only Cloud Functions should write analytics
    }
    
    // Moderation Queue Collection
    match /moderation-queue/{itemId} {
      // Only moderators can access moderation queue
      allow read, write: if isModerator();
    }
    
    // Search Index Collection (system managed)
    match /search-index/{indexId} {
      // Public read access for search functionality
      allow read: if true;
      
      // Only system can write to search index
      allow write: if false; // Only Cloud Functions should manage search index
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && resource.data.userId == getUserId();
      
      // Users can update their notifications (mark as read)
      allow update: if isAuthenticated() && 
                       resource.data.userId == getUserId() &&
                       // Only allow updating read status
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // System creates notifications
      allow create: if false; // Only Cloud Functions should create notifications
    }
    
    // Subscription Management
    match /subscriptions/{subscriptionId} {
      // Users can manage their own subscriptions
      allow read, write: if isAuthenticated() && 
                            request.resource.data.userId == getUserId();
    }
    
    // Research Citations Collection
    match /citations/{citationId} {
      // Anyone can read citations
      allow read: if true;
      
      // Authenticated users can create citations
      allow create: if isAuthenticated() &&
                       request.resource.data.addedBy == getUserId();
      
      // Citation authors can update their citations
      allow update: if isAuthenticated() && resource.data.addedBy == getUserId();
    }
  }
}

// Enhanced Firestore Security Rules for Forum System
// Comprehensive rules supporting real-time forum with threads and messages

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function isThreadAuthor(resource) {
      return isAuthenticated() && resource.data.authorUID == getUserId();
    }
    
    function isMessageAuthor(resource) {
      return isAuthenticated() && resource.data.authorUID == getUserId();
    }
    
    function isModerator() {
      return isAuthenticated() && 
             (get(/databases/$(database)/documents/users/$(getUserId())).data.role in ['admin', 'moderator']);
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(getUserId())).data.role == 'admin';
    }
    
    function isDonor() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(getUserId())).data.tier == 'donor';
    }
    
    function canModerate() {
      return isModerator() || isDonor();
    }

    // Forum Threads Collection
    match /threads/{threadId} {
      // Read access for public threads
      allow read: if resource.data.visibility == 'public' && 
                     resource.data.status == 'active';
      
      // Authors can read their own threads
      allow read: if isThreadAuthor(resource);
      
      // Moderators can read all threads
      allow read: if isModerator();
      
      // Members can read member-only threads
      allow read: if resource.data.visibility == 'members-only' && isAuthenticated();
      
      // Authenticated users can create threads
      allow create: if isAuthenticated() &&
                       // Ensure author matches authenticated user
                       request.resource.data.authorUID == getUserId() &&
                       // Validate required fields
                       request.resource.data.keys().hasAll(['title', 'content', 'authorUID', 'createdAt']) &&
                       // Title length validation
                       request.resource.data.title.size() <= 200 &&
                       request.resource.data.title.size() > 0 &&
                       // Content validation
                       request.resource.data.content.size() > 0 &&
                       request.resource.data.content.size() <= 10000 &&
                       // Category validation
                       request.resource.data.category in ['general', 'scenarios', 'research', 'feedback', 'ethics', 'education'] &&
                       // Status validation
                       request.resource.data.status in ['active', 'draft'] &&
                       // Visibility validation
                       request.resource.data.visibility in ['public', 'private', 'members-only'] &&
                       // Tags validation
                       request.resource.data.tags.size() <= 10;
      
      // Thread authors can update their own threads
      allow update: if isAuthenticated() &&
                       resource.data.authorUID == getUserId() &&
                       // Can't change author
                       request.resource.data.authorUID == resource.data.authorUID &&
                       // Validate updated content
                       request.resource.data.title.size() <= 200 &&
                       request.resource.data.content.size() <= 10000 &&
                       // Can't change creation timestamp
                       request.resource.data.createdAt == resource.data.createdAt;
      
      // Moderators can update any thread for moderation
      allow update: if isModerator();
      
      // Users can update engagement fields (like subscription)
      allow update: if isAuthenticated() &&
                       // Only allow updating specific engagement fields
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['subscriberUIDs', 'viewCount']) &&
                       // Can only add/remove themselves from subscribers
                       (request.resource.data.subscriberUIDs.toSet().difference(resource.data.subscriberUIDs.toSet())
                         .hasOnly([getUserId()]) ||
                        resource.data.subscriberUIDs.toSet().difference(request.resource.data.subscriberUIDs.toSet())
                         .hasOnly([getUserId()]));
      
      // Thread authors can delete their own threads
      allow delete: if isThreadAuthor(resource);
      
      // Moderators can delete any thread
      allow delete: if isModerator();
      
      // Messages subcollection for real-time interaction
      match /messages/{messageId} {
        // Anyone can read messages in public active threads
        allow read: if get(/databases/$(database)/documents/threads/$(threadId)).data.status == 'active' &&
                       get(/databases/$(database)/documents/threads/$(threadId)).data.visibility == 'public';
        
        // Thread authors can read messages in their threads
        allow read: if get(/databases/$(database)/documents/threads/$(threadId)).data.authorUID == getUserId();
        
        // Message authors can read their own messages
        allow read: if isMessageAuthor(resource);
        
        // Moderators can read all messages
        allow read: if isModerator();
        
        // Authenticated users can create messages
        allow create: if isAuthenticated() &&
                         // Ensure message author matches authenticated user
                         request.resource.data.authorUID == getUserId() &&
                         // Validate required fields
                         request.resource.data.keys().hasAll(['content', 'authorUID', 'createdAt']) &&
                         // Content validation
                         request.resource.data.content.size() > 0 &&
                         request.resource.data.content.size() <= 10000 &&
                         // Thread must be active
                         get(/databases/$(database)/documents/threads/$(threadId)).data.status == 'active' &&
                         // Can't post to locked threads unless moderator
                         (get(/databases/$(database)/documents/threads/$(threadId)).data.status != 'locked' || 
                          isModerator()) &&
                         // Reply depth validation
                         (!('replyDepth' in request.resource.data) || 
                          request.resource.data.replyDepth <= 5);
        
        // Message authors can update their own messages
        allow update: if isAuthenticated() &&
                         resource.data.authorUID == getUserId() &&
                         // Can't change author or creation time
                         request.resource.data.authorUID == resource.data.authorUID &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         // Content validation
                         request.resource.data.content.size() > 0 &&
                         request.resource.data.content.size() <= 10000;
        
        // Users can update engagement fields (likes, helpful votes)
        allow update: if isAuthenticated() &&
                         // Only allow updating specific engagement fields
                         request.resource.data.diff(resource.data).affectedKeys()
                           .hasOnly(['likeCount', 'helpfulVotes', 'readBy', 'readCount']);
        
        // Moderators can update any message
        allow update: if isModerator();
        
        // Message authors can delete their own messages
        allow delete: if isMessageAuthor(resource);
        
        // Thread authors can delete messages in their threads
        allow delete: if get(/databases/$(database)/documents/threads/$(threadId)).data.authorUID == getUserId();
        
        // Moderators can delete any message
        allow delete: if isModerator();
      }
    }
    
    // User Likes Collection for forum engagement
    match /users/{userId}/likes/{itemId} {
      // Users can manage their own likes
      allow read, write: if isAuthenticated() && userId == getUserId();
    }
    
    // Forum Categories Collection
    match /forum-categories/{categoryId} {
      // Anyone can read categories
      allow read: if true;
      
      // Only admins can modify categories
      allow write: if isAdmin();
    }
    
    // Moderation Reports Collection
    match /moderation-reports/{reportId} {
      // Users can create reports
      allow create: if isAuthenticated() &&
                       request.resource.data.reportedBy == getUserId() &&
                       request.resource.data.keys().hasAll(['reportedBy', 'reportedAt', 'itemType', 'itemId', 'reason']);
      
      // Moderators can read and update reports
      allow read, update: if isModerator();
      
      // Only system should create initial report structure
      allow delete: if isAdmin();
    }
    
    // Point Transactions for Gamification
    match /point-transactions/{transactionId} {
      // Users can read their own point transactions
      allow read: if isAuthenticated() && resource.data.uid == getUserId();
      
      // Only system/cloud functions should create point transactions
      allow create: if false; // Only Cloud Functions should award points
      
      // Admins can read all transactions for debugging
      allow read: if isAdmin();
    }
    
    // Forum Statistics Collection
    match /forum-stats/{statId} {
      // Anyone can read public forum statistics
      allow read: if resource.data.public == true;
      
      // Only system should update statistics
      allow write: if false; // Only Cloud Functions should update stats
    }
    
    // Thread Subscriptions Collection
    match /thread-subscriptions/{subscriptionId} {
      // Users can manage their own subscriptions
      allow read, write: if isAuthenticated() && 
                            resource.data.subscriberUID == getUserId();
    }
    
    // Forum Notifications Collection
    match /forum-notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && resource.data.recipientUID == getUserId();
      
      // Users can update their notifications (mark as read)
      allow update: if isAuthenticated() && 
                       resource.data.recipientUID == getUserId() &&
                       // Only allow updating read status
                       request.resource.data.diff(resource.data).affectedKeys()
                         .hasOnly(['read', 'readAt']);
      
      // System creates notifications
      allow create: if false; // Only Cloud Functions should create notifications
    }
    
    // Forum User Profiles Enhancement
    match /users/{userId} {
      // Enhanced read permissions for forum context
      allow read: if isAuthenticated() && 
                     (userId == getUserId() || 
                      // Public profile fields for forum display
                      resource.data.keys().hasAny(['displayName', 'photoURL', 'tier', 'forumStats']));
      
      // Users can update their forum-related profile data
      allow update: if isAuthenticated() && 
                       userId == getUserId() &&
                       // Validate forum stats updates
                       (!('forumStats' in request.resource.data) || 
                        request.resource.data.forumStats.keys()
                          .hasAll(['threadsCreated', 'messagesPosted', 'helpfulAnswers']));
      
      // Forum Statistics subcollection
      match /forum-activity/{activityId} {
        // Users can read their own forum activity
        allow read: if isAuthenticated() && userId == getUserId();
        
        // System updates forum activity
        allow write: if false; // Only Cloud Functions should track activity
      }
    }
    
    // Forum Leaderboard Collection
    match /forum-leaderboard/{leaderboardId} {
      // Anyone can read leaderboard
      allow read: if true;
      
      // Only system should update leaderboard
      allow write: if false; // Only Cloud Functions should update leaderboard
    }
    
    // Expert Answers Collection
    match /expert-answers/{answerId} {
      // Anyone can read expert answers
      allow read: if true;
      
      // Experts and moderators can create expert answers
      allow create: if isAuthenticated() &&
                       request.resource.data.expertUID == getUserId() &&
                       (isDonor() || isModerator());
      
      // Expert authors can update their answers
      allow update: if isAuthenticated() && resource.data.expertUID == getUserId();
    }
    
    // Gamification Badges Collection
    match /user-badges/{badgeId} {
      // Users can read badges
      allow read: if true;
      
      // Only system should award badges
      allow write: if false; // Only Cloud Functions should award badges
    }
  }
}

name: Security Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Secret Detection
      - name: Run secret detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      # Check for hardcoded credentials
      - name: Scan for hardcoded secrets
        run: |
          echo "üîç Scanning for hardcoded secrets..."

          # Check for Firebase API keys
          if grep -r "AIzaSy[A-Za-z0-9_-]*" --include="*.js" --include="*.html" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git .; then
            echo "‚ùå ERROR: Firebase API key found in code!"
            exit 1
          fi

          # Check for Stripe keys
          if grep -r "pk_live_[A-Za-z0-9]*\|sk_live_[A-Za-z0-9]*\|rk_live_[A-Za-z0-9]*" --include="*.js" --include="*.html" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git .; then
            echo "‚ùå ERROR: Stripe live key found in code!"
            exit 1
          fi

          # Check for hardcoded database URLs
          if grep -r "firebase\.database.*https://.*\.firebaseio\.com" --include="*.js" --include="*.html" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git .; then
            echo "‚ùå ERROR: Hardcoded Firebase database URL found!"
            exit 1
          fi

          # Check for webhook secrets
          if grep -r "whsec_[A-Za-z0-9]*" --include="*.js" --include="*.html" --include="*.json" --exclude-dir=node_modules --exclude-dir=.git .; then
            echo "‚ùå ERROR: Webhook secret found in code!"
            exit 1
          fi

          # Check for generic secrets patterns
          if grep -r "password.*=.*[\"'][^\"']*[\"']\|secret.*=.*[\"'][^\"']*[\"']\|token.*=.*[\"'][^\"']*[\"']" --include="*.js" --include="*.html" --exclude="*.test.js" --exclude="*.spec.js" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "your_.*_here\|example\|placeholder\|template\|test\|mock\|dummy"; then
            echo "‚ö†Ô∏è  WARNING: Potential secret found - please review manually"
          fi

          echo "‚úÖ Secret scan completed"

      # Check environment variable usage
      - name: Verify environment variable patterns
        run: |
          echo "üîß Checking environment variable usage..."

          # Ensure Firebase config uses environment variables
          if ! grep -r "import\.meta\.env\.VITE_FIREBASE_API_KEY\|window\.envConfig" --include="*.js" src/js/services/firebase-service.js; then
            echo "‚ùå ERROR: Firebase service not using environment variables!"
            exit 1
          fi

          # Check for proper error throwing when env vars missing
          if ! grep -r "throw new Error.*environment.*variable" --include="*.js" src/js/services/firebase-service.js; then
            echo "‚ùå ERROR: Firebase service doesn't throw error for missing env vars!"
            exit 1
          fi

          echo "‚úÖ Environment variable checks passed"

      # Lint for security issues
      - name: Security linting
        run: |
          npm install -g eslint-plugin-security
          echo "üîí Running security linting..."
          npx eslint --ext .js --no-eslintrc --config '{"plugins":["security"],"extends":["plugin:security/recommended"],"parserOptions":{"ecmaVersion":2022,"sourceType":"module"},"env":{"browser":true,"es6":true}}' src/ || echo "‚ö†Ô∏è Security linting completed with warnings"

      # Check .gitignore completeness
      - name: Verify .gitignore protection
        run: |
          echo "üìù Checking .gitignore protection..."

          required_patterns=(
            ".env"
            ".env.local" 
            ".env.production"
            "node_modules"
            "*.log"
            ".firebase"
            "firebase-debug.log"
          )

          for pattern in "${required_patterns[@]}"; do
            if ! grep -q "^$pattern" .gitignore; then
              echo "‚ùå ERROR: Missing $pattern in .gitignore"
              exit 1
            fi
          done

          echo "‚úÖ .gitignore protection verified"

      # Dependency vulnerability check
      - name: Audit dependencies
        run: |
          echo "üì¶ Checking for vulnerable dependencies..."
          npm audit --audit-level=high || echo "‚ö†Ô∏è Dependency audit completed with warnings"

      # Final security summary
      - name: Security Summary
        run: |
          echo "üõ°Ô∏è Security Scan Summary:"
          echo "‚úÖ Secret detection completed"
          echo "‚úÖ Hardcoded credential scan passed"
          echo "‚úÖ Environment variable usage verified"
          echo "‚úÖ .gitignore protection confirmed"
          echo "‚úÖ Dependency audit completed"
          echo ""
          echo "üöÄ Repository is secure for deployment!"
